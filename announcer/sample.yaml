---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: announcer
  namespace: default
---
# Based on flannel RBAC
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: get-pods
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: announcer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: get-pods
subjects:
- kind: ServiceAccount
  name: announcer
  namespace: default
- kind: ServiceAccount
  name: default
  namespace: default
---
apiVersion: v1
kind: Pod
metadata:
  name: sample-announce
spec:
  serviceAccountName: announcer
  restartPolicy: Never
  containers:
    - name: target-container
      image: centos:centos7
      command: ["/bin/bash"]
      args:
        - "-c"
        - "while true; do sleep 1; done"
    - name: sample-announce
      image: dougbtv/jq
      command: ["/bin/bash"]
      args:
        - "-c"
        - >
          KUBE_TOKEN=$(</var/run/secrets/kubernetes.io/serviceaccount/token);
          TARGET_URL=https://kubernetes.default.svc.cluster.local/api/v1/namespaces/default/pods/sample-announce;
          echo "----------------------- Waiting for target-container";
          found_it=false;
          counted=1;
          while [ "$found_it" = false ]; do
            container_id=$(curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" $TARGET_URL | jq '.status.containerStatuses[] | select(.name=="target-container") | .containerID';)
            echo $container_id | grep -P "docker";
            if [ "$?" = "0" ]; then
              found_it=true;
              container_id=$(echo $container_id | sed -e 's/"//g')
              echo "Found container_id (tries $counted): $container_id";
            fi;
            let "counted += 1";
            sleep 1;
          done;
          echo "-----------------------";
          while true; do sleep 1; done;
    #       KUBE_TOKEN=$(</var/run/secrets/kubernetes.io/serviceaccount/token) &&
    #       podname=$(curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" https://kubernetes.default.svc.cluster.local/api/v1/namespaces/default/pods | jq '.items[] .metadata.name' | grep -i demo | sed -e 's/\"//g') && 
    #       podip=$(curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" https://kubernetes.default.svc.cluster.local/api/v1/namespaces/default/pods/$podname | jq '.status.podIP' | sed -s 's/\"//g') &&
    #       echo "the pod is @ $podip" &&
    #       curl -L -X PUT http://etcd-client.default.svc.cluster.local:2379/v2/keys/podip -d value="$podip"

# KUBE_TOKEN=$(</var/run/secrets/kubernetes.io/serviceaccount/token) && curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" https://kubernetes.default.svc.cluster.local/api/v1/namespaces/default/pods
---
